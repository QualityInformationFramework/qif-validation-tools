///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia, Metrosage, and project contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

using System;
using System.Xml;
using System.Xml.Schema;

public class XMLValidator
{
    static int Main(string[] args)
    {
        if (args.Length < 2)
        {
            Console.WriteLine("Arguments: <xml> <xsd> [<xsd>...]");
            return 1;
        }

        System.Threading.Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo("en-us");

        // In .net core resolver turned off by default ("Resolving of external URIs was prohibited")
        // Enable resolver...
        AppContext.SetSwitch("Switch.System.Xml.AllowDefaultResolver", true);

        XMLValidator validator = new XMLValidator();
        return validator.Validate(args) ? 0 : 1;
    }

    public bool Validate(string[] args)
    {
        string xmlName = args[0];

        try
        {
            // XSD
            XmlSchemaSet xsc = new XmlSchemaSet();
            for (int i = 1; i < args.Length; ++i)
                xsc.Add(null, new XmlTextReader(args[i]));

            // XML
            XmlReaderSettings settings = new XmlReaderSettings();
            settings.ValidationType = ValidationType.Schema;
            settings.Schemas.Add(xsc);
            settings.ValidationFlags |= XmlSchemaValidationFlags.ReportValidationWarnings;
            settings.ValidationEventHandler += new ValidationEventHandler(ValidationHandler);
            XmlReader reader = XmlReader.Create(xmlName, settings);

            // validate
            while ((MaxErrorsCount < 0 || ErrorsCount < MaxErrorsCount) && reader.Read()) ;
            reader.Close();

            // fail?
            if (ErrorsCount > 0)
            {
                throw new Exception(ErrorMessage);
            }
            else if (ErrorMessage.Length > 0)
            {
                // Show warnings
                Console.WriteLine(ErrorMessage);
            }

            // XML Validation succeeded
            Console.WriteLine("XML validation succeeded");
            return true;
        }
        catch (Exception error)
        {
            Console.WriteLine("Error: " + error.Message);
            return false;
        }
    }

    public static void ValidationHandler(object sender, ValidationEventArgs args)
    {
        ErrorMessage = ErrorMessage + args.Severity + ": " + args.Message + "\n";
        // do not treat warning as error
        if (args.Severity == XmlSeverityType.Error)
            ++ErrorsCount;
    }

    static int MaxErrorsCount = 30;
    static int ErrorsCount = 0;
    static string ErrorMessage = "";
}
